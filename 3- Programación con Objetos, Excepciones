Ejercicio 2: Sólo Volar Si...

Modificá el método volar_en_circulos! para que sólo vuele (pierda energía) si puede.

class Golondrina
  def initialize
    @energia = 50
  end
  
  def energia
    @energia
  end
  
  def volar_en_circulos!
    if @energia >= 20
    @energia -= 20
    end
  end
end

---------------------------------------------
Ejercicio 6: Abortando la evaluación

Veamos si va quedando claro: modifiquemos a Golondrina para que, en caso de no poder volar, no falle silenciosamente sino que lance una excepción. El mensaje debe ser "No tengo suficiente energía".

class Golondrina
  def initialize
    @energia = 50
  end
  
  def energia
    @energia
  end
  
  def volar_en_circulos!
    if @energia < 20
      raise "No tengo suficiente energía"
    end
    @energia -= 20
    end
  end
  
 -------------------------------------------
 Ejercicio 7: Paren todo
 
 Veamos si se entiende: agregá a la clase Transferencia un método deshacer! que sea exactamente al revés del realizar!: debe revertir la transferencia, moviendo el monto de la cuenta destino a la de origen.

Como ahora tanto la cuenta origen como la cuenta destino pueden debitar y depositar, unificamos su comportamiento en una clase Cuenta. La podés ver en la solapa Biblioteca.

class Transferencia
  def initialize(monto_a_transferir)
    @monto = monto_a_transferir
  end
  
  def realizar!(origen, destino)
    origen.debitar! @monto
    destino.depositar! @monto
  end
  
  def deshacer!(origen, destino)
    origen.depositar! @monto
    destino.debitar! @monto
  end
end

---------------------------------------------
Ejercicio 8: El orden importa

Veamos si queda claro: éste código tienen un problema relativo al manejo de excepciones. ¡Corregilo!

class Saqueo
  def initialize(barco_saqueador)
    @barco = barco_saqueador
  end
  
  def realizar_contra!(ciudad)
     if (ciudad.puede_hacerle_frente_a?(@barco))
      raise "No se puede invadir la ciudad"
    end
    @barco.preparar_tripulacion!
    @barco.desembarcar!(ciudad)
  end
end

------------------------------------------------
Ejercicio 9: Estudiando a las golondrinas

Escribí el código necesario y pensá si es necesario hacer algo especial para que la excepción que lanza la golondrina recibida se lance también en estudiar_golondrina!.

class Ornitologo
 
    def estudiar_golondrina!(golondrina)
    golondrina.volar_en_circulos!
  end
end

-------------------------------------------------
Ejercicio 10: Un buen mensaje

Veamos si queda claro: este código tiene un problema relativo al manejo de excepciones. ¡Corregilo!

class Golondrina
  def initialize
    @energia = 50
  end
  
  def energia
    @energia
  end
  
  def comer_alpiste!(cantidad)
    @energia += cantidad * 2
    if cantidad <= 0
      raise "error! la cantidad ingresada fue $#{cantidad}"
    end
  end
end

---------------------------------------------------



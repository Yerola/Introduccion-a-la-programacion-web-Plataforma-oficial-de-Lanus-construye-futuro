Ejercicio 3: Todas las ganancias, la ganancia

¿Empezás a ver un patrón? Tratá de escribir gananciaTotal4 que funcione para 4 elementos.

function gananciaTotal4(balancesDeUnPeriodo) {
  let sumatoria =0;
   sumatoria = sumatoria + balancesDeUnPeriodo[0].ganancia;
  sumatoria = sumatoria + balancesDeUnPeriodo[1].ganancia;
  sumatoria = sumatoria + balancesDeUnPeriodo[2].ganancia;
    sumatoria = sumatoria + balancesDeUnPeriodo[3].ganancia;
   return sumatoria;
}

----------------------------------------------------
Ejercicio 5: Cuentas claras

Completá la función cantidadDeBalancesPositivos. Si prestás atención, notarás que tiene una estructura similar al problema anterior. 

function cantidadDeBalancesPositivos(balancesDeUnPeriodo) {
  let cantidad = 0;
  for (let balance of balancesDeUnPeriodo) {
    if(balance.ganancia > 0) {
      cantidad = cantidad + 1;
    }
  }
  return cantidad;
}

---------------------------------------------------
Ejercicio 6: La ganancia promedio

Ana quisiera saber dado un conjunto cualquiera de balances cuál es su gananciaPromedio.

 gananciaPromedio([
      { mes: "marzo", ganancia: 8 }, 
      { mes: "agosto", ganancia: 10 }
  ])
9

function gananciaPromedio(balances) {
  return gananciaTotal(balances) / longitud(balances);
}

------------------------------------------------
Ejercicio 7: Quién gana, quién pierde

Definí las funciones:

gananciaPositiva, que es la suma de las ganancias de los balances positivos
promedioGananciasPositivas invocando gananciaPositiva y cantidadDeBalancesPositivos.

function gananciaPositiva(balancesDeUnPeriodo) {
  let suma = 0;
  for (let balance of balancesDeUnPeriodo) {
    if(balance.ganancia > 0) {
      suma = suma + balance.ganancia;
    }
  }
  return suma;
}

function promedioGananciasPositivas(balancesDeUnPeriodo) {
  return gananciaPositiva(balancesDeUnPeriodo) / cantidadDeBalancesPositivos(balancesDeUnPeriodo);
}

-------------------------------------------------
Ejercicio 8: Soy el mapa, soy el mapa

Completá la función ganancias que toma una lista de balances y devuelve una lista que solo posea solo las ganancias de cada uno.

 ganancias([
      { mes: "enero", ganancia: 40 }, 
      { mes: "febrero", ganancia: 12 }, 
      { mes: "marzo", ganancia: 8}
  ])
[40, 12, 8]

function ganancias(balancesDeUnPeriodo) {
  let ganancias = [];
  for (let balance of balancesDeUnPeriodo) {
    agregar(ganancias, balance.ganancia)
  }
  return ganancias;
}

-------------------------------------------------
Ejercicio 9: A filtrar, a filtrar cada cosa en su lugar

Completá la función balancesPositivos que toma los balances de un período y devuelve una lista con aquellos cuya ganancia fue mayor a cero.

function balancesPositivos(balancesDeUnPeriodo) {
  let balances = [];
  for (let balance of balancesDeUnPeriodo) {
    if(balance.ganancia > 0) {
      agregar(balances, balance)
    }
  }
  return balances;
}

-----------------------------------------------
Ejercicio 10: Un promedio más positivo

Definí la función gananciasDeBalancesPositivos y luego usala junto a promedio para definir promedioDeBalancesPositivos.

function gananciasDeBalancesPositivos(balancesDeUnPeriodo) {
  return ganancias(balancesPositivos(balancesDeUnPeriodo));
}

function promedioDeBalancesPositivos(balancesDeUnPeriodo) {
  return promedio(gananciasDeBalancesPositivos(balancesDeUnPeriodo));
}

-------------------------------------------------
Ejercicio 11: Esto es lo máximo

Usando esta nueva función, definí la función maximaGanancia que nos diga cuál es la ganancia más alta entre los balances de un período de tiempo.

 maximaGanancia([
      { mes: "enero", ganancia: 87 }, 
      { mes: "febrero", ganancia: 12 }, 
      { mes: "marzo", ganancia: 8}
  ])
87

function maximaGanancia(balancesDeUnPeriodo) {
  return maximo(ganancias(balancesDeUnPeriodo));
}

-----------------------------------------------
Ejercicio 12: Como mínimo

Definí la función minimaGananciaPositiva que nos diga cuál es la ganancia más baja de todos los balances positivos.

 minimaGananciaPositiva([
      { mes: "enero", ganancia: -40 }, 
      { mes: "febrero", ganancia: 42 }, 
      { mes: "marzo", ganancia: 8}, 
      { mes: "abril", ganancia:  -5}
  ])
8

function minimaGananciaPositiva(balancesDeUnPeriodo) {
  
  return minimo(gananciasDeBalancesPositivos(balancesDeUnPeriodo));
}

------------------------------------------------
Ejercicio 13: Los mejores meses del año

Definí las funciones meses, afortunados, mesesAfortunados.

function meses(balancesDeUnPeriodo) {
  let todosLosMeses = [];
  for (let balance of balancesDeUnPeriodo) {
    agregar(todosLosMeses, balance.mes);
  }
  return todosLosMeses;
}

function afortunados(balancesDeUnPeriodo) {
  let mejoresMeses = [];
  for(let balance of balancesDeUnPeriodo) {
    if(balance.ganancia > 1000) {
      agregar(mejoresMeses, balance);
    }
  }
  return mejoresMeses;
}

function mesesAfortunados(balancesDeUnPeriodo) {
return meses(afortunados(balancesDeUnPeriodo));
  }
  
-----------------------------------------------------














